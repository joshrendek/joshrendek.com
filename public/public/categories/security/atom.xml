<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Security | Josh Rendek]]></title>
  <link href="http://joshrendek.com/categories/security/atom.xml" rel="self"/>
  <link href="http://joshrendek.com/"/>
  <updated>2016-12-15T16:05:34-05:00</updated>
  <id>http://joshrendek.com/</id>
  <author>
    <name><![CDATA[Josh Rendek]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Go-lang Compare *ssh.Request.Type Against a String]]></title>
    <link href="http://joshrendek.com/2014/07/go-lang-compare-star-ssh-dot-request-dot-type-against-a-string/"/>
    <updated>2014-07-08T08:34:00-04:00</updated>
    <id>http://joshrendek.com/2014/07/go-lang-compare-star-ssh-dot-request-dot-type-against-a-string</id>
    <content type="html"><![CDATA[<p>I was working on the agent for <a href="http://sshpot.com/">SSH Pot</a> and ran into something interesting last night. A lot of the brute force attempts attempt to run a command like this:</p>

<pre><code class="bash Example Exec">ssh user@host 'uname'
</code></pre>

<p>This is different than:</p>

<pre><code class="bash Example Shell">ssh user@host
$ uname
</code></pre>

<p>The first command is executing a command then exiting, the second is actually logging in and giving the user a shell. The first requests a exec subsystem and the second requests a shell subsystem - so there are two ways to handle it.</p>

<pre><code class="go broken_handler.go">func HandleShellRequest(channel ssh.Channel, in &lt;-chan *ssh.Request) {
    for req := range in {
        ok := true
        logfile.Println("[request " + req.Type + "]: " + string(req.Payload))
        switch req.Type {
        case "shell":
            req.Reply(ok, nil)
        case "exec":
            if string(req.Payload) == string("uname") {
                channel.Write([]byte("\n\rLinux\n\r"))
            }

            channel.Close()
        }
    }
}
</code></pre>

<p>When logging in my logfile it would show something like:</p>

<p><code>bash Log
</code></p>

<p>And even when comparing the two side by side with something like this:</p>

<pre><code class="go log.go">logfile.Println("["+string(req.Payload)+"]:["+"uname"+"]")
</code></pre>

<p>I would get this output:</p>

<p><code>bash Log
</code></p>

<p>Yet the comparison on line 9 would not get hit. After sitting and thinking about it for a while I decided to print the bytes out:</p>

<pre><code class="bash Log">INFO: 2014/07/07 23:15:18 sshd.go:157: [0 0 0 5 117 110 97 109 101]
INFO: 2014/07/07 23:15:18 sshd.go:158: [117 110 97 109 101]
</code></pre>

<p>Aha! So for some reason req.Payload is padded with 3 null bytes and a ENQ byte (hex 5).</p>

<p>Here is the corrected version removing the correct bytes - now the string comparison works:</p>

<pre><code class="go working_handler.go">func HandleShellRequest(channel ssh.Channel, in &lt;-chan *ssh.Request) {
    for req := range in {
        ok := true
        logfile.Println("[request " + req.Type + "]: " + string(req.Payload))
        switch req.Type {
        case "shell":
            req.Reply(ok, nil)
        case "exec":
            if string(req.Payload[4:]) == string("uname") {
                channel.Write([]byte("\n\rLinux\n\r"))
            }

            channel.Close()
        }
    }
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why Setuid Is Bad and What You Can Do]]></title>
    <link href="http://joshrendek.com/2013/02/why-setuid-is-bad-and-what-you-can-do/"/>
    <updated>2013-02-26T22:28:00-05:00</updated>
    <id>http://joshrendek.com/2013/02/why-setuid-is-bad-and-what-you-can-do</id>
    <content type="html"><![CDATA[<h2>Why <code>setuid</code> is Bad</h2>

<p><code>setuid</code> allows a binary to be run as a different user then the one invoking it. For example, ping needs to use low level system interfaces (<code>socket</code>, <code>PF_INET</code>, <code>SOCK_RAW</code>, etc) in order to function properly. We can watch this in action by starting ping in another terminal window ( <code>ping google.com</code> ) and then using <code>strace</code> to see the syscall&rsquo;s being made:</p>

<p><code>sudo strace -p PID</code> and we get the following:</p>

<pre><code class="bash strace output">munmap(0x7f329e7ea000, 4096)            = 0stat("/etc/resolv.conf", {st_mode=S_IFREG|0644, st_size=185, ...}) = 0
socket(PF_INET, SOCK_DGRAM|SOCK_NONBLOCK, IPPROTO_IP) = 4
connect(4, {sa_family=AF_INET, sin_port=htons(53), sin_addr=inet_addr("8.8.8.8")}, 16) = 0
</code></pre>

<p>We can find all setuid programs installed by issuing the command:</p>

<pre><code class="bash How to find all setuid programs">sudo find / -xdev \( -perm -4000 \) -type f -print0 -exec ls -l {} \;
</code></pre>

<p>This will find all commands that have the root setuid bit set in their permission bit.</p>

<p><a name="top"></a></p>

<h4><code>setuid</code> list for a few popular operating systems:</h4>

<p>Of particular interest in OpenBSD, where a lot of work was done to remove and switch programs from needing to use setuid/gid permissions. OpenIndiana is the worst offender and has the widest vector for attack.</p>

<ul>
<li><a href="#ubuntu">Ubuntu</a> (22 binaries)</li>
<li><a href="#centos">CentOS</a> (21 binaries)</li>
<li><a href="#openbsd">OpenBSD</a> (3 binaries)</li>
<li><a href="#openindiana">OpenIndiana</a> (53 binaries)</li>
</ul>


<p><code>setuid</code> escalation is a common attack vector and can allow unprivileged code to be executed by a regular user, and then escalate itself to root and drop you in on the root shell.</p>

<p><strong><em>Here are a few examples:</em></strong></p>

<h4>CVE-2012-0056: Exploiting /proc/pid/mem</h4>

<p><a href="http://blog.zx2c4.com/749">http://blog.zx2c4.com/749</a> - C code that uses a bug in the way the Linux kernel checked permissions on /proc/pid/mem and then uses that to exploit the su binary to give a root shell.</p>

<h4>CVE-2010-3847: Exploiting via $ORIGIN and file descriptors</h4>

<p><a href="http://www.exploit-db.com/exploits/15274/">http://www.exploit-db.com/exploits/15274/</a> - By exploiting a hole in the way the $ORIGIN is checked, a symlink can be made to a program that uses <code>setuid</code> and <code>exec</code>&rsquo;d &lsquo;to obtain the file descriptors which then lets arbitrary code injection (in this case a call to <code>system("/bin/bash")</code>).</p>

<p>More of these can be found at <a href="http://www.exploit-db.com/shellcode/">http://www.exploit-db.com/shellcode/</a> and just <a href="https://www.google.com/search?q=setuid+exploits">searching google for <code>setuid</code> exploits</a>.</p>

<p>So you may not want to completely disable the <code>setuid</code> flag on all the binaries for your distribution, but we can turn on some logging to watch when they&rsquo;re getting called and install a kernel patch that will secure the OS and help prevent 0-days that may prey on <code>setuid</code> vulnerabilities.</p>

<h2>How to log setuid calls</h2>

<p>I will detail the steps to do this on Ubuntu, but they should apply to the other audit daemons on CentOS.</p>

<p>Let&rsquo;s first install auditd: <code>sudo apt-get install auditd</code></p>

<p>Let&rsquo;s open up <code>/etc/audit/audit.rules</code>, and with a few tweaks with vim, we can insert the list we generated with find into the audit rule set (explanation of each flag after the jump):
&#8220;` bash /etc/audit/audit.rules</p>

<h1>This file contains the auditctl rules that are loaded# whenever the audit daemon is started via the initscripts.</h1>

<h1>The rules are simply the parameters that would be passed</h1>

<h1>to auditctl.</h1>

<h1>First rule - delete all</h1>

<p>-D</p>

<h1>Increase the buffers to survive stress events.</h1>

<h1>Make this bigger for busy systems</h1>

<p>-b 320</p>

<h1>Feel free to add below this line. See auditctl man page</h1>

<p>-a always,exit -F path=/usr/lib/pt_chown -F perm=x -F auid>=500 -F auid!=4294967295 -k privileged
-a always,exit -F path=/usr/lib/eject/dmcrypt-get-device -F perm=x -F auid>=500 -F auid!=4294967295 -k privileged
-a always,exit -F path=/usr/lib/dbus-1.0/dbus-daemon-launch-helper -F perm=x -F auid>=500 -F auid!=4294967295 -k privileged
-a always,exit -F path=/usr/lib/openssh/ssh-keysign -F perm=x -F auid>=500 -F auid!=4294967295 -k privileged
-a always,exit -F path=/usr/sbin/uuidd -F perm=x -F auid>=500 -F auid!=4294967295 -k privileged
-a always,exit -F path=/usr/sbin/pppd -F perm=x -F auid>=500 -F auid!=4294967295 -k privileged
-a always,exit -F path=/usr/bin/at -F perm=x -F auid>=500 -F auid!=4294967295 -k privileged
-a always,exit -F path=/usr/bin/passwd -F perm=x -F auid>=500 -F auid!=4294967295 -k privileged
-a always,exit -F path=/usr/bin/mtr -F perm=x -F auid>=500 -F auid!=4294967295 -k privileged
-a always,exit -F path=/usr/bin/sudoedit -F perm=x -F auid>=500 -F auid!=4294967295 -k privileged
-a always,exit -F path=/usr/bin/traceroute6.iputils -F perm=x -F auid>=500 -F auid!=4294967295 -k privileged
-a always,exit -F path=/usr/bin/chsh -F perm=x -F auid>=500 -F auid!=4294967295 -k privileged
-a always,exit -F path=/usr/bin/sudo -F perm=x -F auid>=500 -F auid!=4294967295 -k privileged
-a always,exit -F path=/usr/bin/chfn -F perm=x -F auid>=500 -F auid!=4294967295 -k privileged
-a always,exit -F path=/usr/bin/gpasswd -F perm=x -F auid>=500 -F auid!=4294967295 -k privileged
-a always,exit -F path=/usr/bin/newgrp -F perm=x -F auid>=500 -F auid!=4294967295 -k privileged
-a always,exit -F path=/bin/fusermount -F perm=x -F auid>=500 -F auid!=4294967295 -k privileged
-a always,exit -F path=/bin/umount -F perm=x -F auid>=500 -F auid!=4294967295 -k privileged
-a always,exit -F path=/bin/ping -F perm=x -F auid>=500 -F auid!=4294967295 -k privileged
-a always,exit -F path=/bin/ping6 -F perm=x -F auid>=500 -F auid!=4294967295 -k privileged
-a always,exit -F path=/bin/su -F perm=x -F auid>=500 -F auid!=4294967295 -k privileged
-a always,exit -F path=/bin/mount -F perm=x -F auid>=500 -F auid!=4294967295 -k privileged
&#8220;`</p>

<pre><code class="text audtid Options Explained">-a: appends the always, and exit rules. This says to always make a log at syscall entry and syscall exit.
-F
     path= says filter to the executable being called
     perm=x says filter on the program being executable
     auid&gt;= says log all calls for users who have a UID above 500 (regular user accounts start at 1000 generally)
     auid!=4294967295 sometimes a process may start before the auditd, in which case it will get a auid of 4294967295
-k passes a filter key that will be put into the record log, in this case its "privileged"
</code></pre>

<p>So now when we run ping google.com we can see a full audit trail in <code>/var/log/audit/audit.log</code>:
<code>bash auditd output
type=SYSCALL msg=audit(1361852594.621:48): arch=c000003e syscall=59 success=yes exit=0 a0=f43de8 a1=d40488 a2=ed8008 a3=7fffc9c9a150 items=2 ppid=1464 pid=1631 auid=1000 uid=1000 gid=1000 euid=0 suid=0 fsuid=0 egid=1000 sgid=1000 fsgid=1000 tty=pts1 ses=6 comm="ping" exe="/bin/ping" key="privileged"type=EXECVE msg=audit(1361852594.621:48): argc=2 a0="ping" a1="google.com"
type=BPRM_FCAPS msg=audit(1361852594.621:48): fver=0 fp=0000000000000000 fi=0000000000000000 fe=0 old_pp=0000000000000000 old_pi=0000000000000000 old_pe=0000000000000000 new_pp=ffffffffffffffff new_pi=0000000000000000 new_pe=ffffffffffffffff
type=CWD msg=audit(1361852594.621:48):  cwd="/home/ubuntu"
type=PATH msg=audit(1361852594.621:48): item=0 name="/bin/ping" inode=131711 dev=08:01 mode=0104755 ouid=0 ogid=0 rdev=00:00
type=PATH msg=audit(1361852594.621:48): item=1 name=(null) inode=934 dev=08:01 mode=0100755 ouid=0 ogid=0 rdev=00:00
</code></p>

<h2>Next steps: Patching and upgrading the kernel with GRSecurity</h2>

<p>GRSecurity is an awesome tool in the security-minded system administrators toolbag. It will prevent zero days (like the proc mem exploit explained above <a href="http://en.wikibooks.org/wiki/Grsecurity/Appendix/Grsecurity_and_PaX_Configuration_Options#Remove_addresses_from_.2Fproc.2F.3Cpid.3E.2F.5Bsmaps.7Cmaps.7Cstat.5D"><sup>1</sup></a> ) by securing which areas a user can access. A full list can be seen at <a href="http://en.wikibooks.org/wiki/Grsecurity/Appendix/Grsecurity_and_PaX_Configuration_Options">http://en.wikibooks.org/wiki/Grsecurity/Appendix/Grsecurity_and_PaX_Configuration_Options</a> and <a href="http://en.wikipedia.org/wiki/Grsecurity#Miscellaneous_features">http://en.wikipedia.org/wiki/Grsecurity#Miscellaneous_features</a>, I suggest going through these and seeing if you want to continue with this.</p>

<p><strong>The following below is for advanced users. Not responsible for any issues you may run into, please make sure to test this in a staging/test environment.</strong></p>

<p>Here are the steps I followed to install the patch:</p>

<pre><code class="bash"># Start by downloading the latest kernel
wget http://www.kernel.org/pub/linux/kernel/v3.0/linux-3.2.39.tar.bz2

# Next extract it
tar xjvf linux-3.2.39.tar.bz2
cd linux-3.2.39

# Copy over your current kernel configuration:
cp -vi /boot/config-`uname -r` .config

# Updates the config file to match old config and prompts for any new kernel options.
make oldconfig

# This will make sure only modules get compiled only if they are in your kernel. 
make localmodconfig

# Bring up the configuration menu
make menuconfig
</code></pre>

<p>Once your in the menu config you can browse to the <code>Security</code> section and go to <code>Grsecurity</code> and enable it. I set the configuration method to automatic and then went to Customize. For example, you can now go to <code>Kernel Auditing -&gt; Exec logging</code> to turn on some additional logging to shell activities (<strong>WARNING: this will generate a lot of log activity, decide if you want to use this or not). I suggest going through all of these and reading through their menu help descriptions (when selecting one, press the <code>?</code> key to bring up the help</strong>).</p>

<p>Now we&rsquo;ll finish making the kernel and compiling it:</p>

<pre><code class="bash"># Now we can compile the kernel
make -j2 # where 2 is the # of CPU's + 1

# Install and load the dynamic kernel modules
sudo make modules_install

# Finally install kernel
sudo make install
</code></pre>

<p>We can now reboot and boot into our GRsecurity patched kernel!</p>

<p>Hopefully this article has provided some insight into what the <code>setuid</code> flag does, how it has and can be exploited, and what we can do to prevent this in the future.</p>

<p>Here are a few links to useful books on the subject of shellcode and exploits that I reccomend:</p>

<center>
    <iframe src="http://rcm.amazon.com/e/cm?lt1=_blank&bc1=FFFFFF&IS1=1&npa=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=blues0c3-20&o=1&p=8&l=as1&m=amazon&f=ifr&ref=qf_sp_asin_til&asins=1597490059" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>

    <iframe src="http://rcm.amazon.com/e/cm?t=blues0c3-20&o=1&p=8&l=as1&asins=1597494860&IS1=1&ref=qf_sp_asin_til&fc1=000000&lt1=_blank&m=amazon&lc1=0000FF&bc1=FFFFFF&bg1=FFFFFF&npa=1&f=ifr" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>
</center>


<h3>Below is the list of <code>setuid</code> binaries on each OS</h3>

<p><a name="ubuntu"></a></p>

<h4>Ubuntu 12.04 LTS (22)</h4>

<p><a href="#top">back to top</a>
<code>bash
-rwsr-xr-x 1 root    root        31304 Mar  2  2012 /bin/fusermount-rwsr-xr-x 1 root    root        94792 Mar 30  2012 /bin/mount
-rwsr-xr-x 1 root    root        35712 Nov  8  2011 /bin/ping
-rwsr-xr-x 1 root    root        40256 Nov  8  2011 /bin/ping6
-rwsr-xr-x 1 root    root        36832 Sep 12 18:29 /bin/su
-rwsr-xr-x 1 root    root        69096 Mar 30  2012 /bin/umount
-rwsr-sr-x 1 daemon  daemon      47928 Oct 25  2011 /usr/bin/at
-rwsr-xr-x 1 root    root        41832 Sep 12 18:29 /usr/bin/chfn
-rwsr-xr-x 1 root    root        37096 Sep 12 18:29 /usr/bin/chsh
-rwsr-xr-x 1 root    root        63848 Sep 12 18:29 /usr/bin/gpasswd
-rwsr-xr-x 1 root    root        62400 Jul 28  2011 /usr/bin/mtr
-rwsr-xr-x 1 root    root        32352 Sep 12 18:29 /usr/bin/newgrp
-rwsr-xr-x 1 root    root        42824 Sep 12 18:29 /usr/bin/passwd
-rwsr-xr-x 2 root    root        71288 May 31  2012 /usr/bin/sudo
-rwsr-xr-x 2 root    root        71288 May 31  2012 /usr/bin/sudoedit
-rwsr-xr-x 1 root    root        18912 Nov  8  2011 /usr/bin/traceroute6.iputils
-rwsr-xr-- 1 root    messagebus 292944 Oct  3 13:03 /usr/lib/dbus-1.0/dbus-daemon-launch-helper
-rwsr-xr-x 1 root    root        10408 Dec 13  2011 /usr/lib/eject/dmcrypt-get-device
-rwsr-xr-x 1 root    root       240984 Apr  2  2012 /usr/lib/openssh/ssh-keysign
-rwsr-xr-x 1 root    root        10592 Oct  5 16:08 /usr/lib/pt_chown
-rwsr-xr-- 1 root    dip        325744 Feb  4  2011 /usr/sbin/pppd
-rwsr-sr-x 1 libuuid libuuid     18856 Mar 30  2012 /usr/sbin/uuidd
</code></p>

<p><a name="centos"></a></p>

<h4>CentOS 6.3 (21)</h4>

<p><a href="#top">back to top</a>
<code>bash
-rwsr-xr-x. 1 root root  76056 Nov  5 05:21 /bin/mount-rwsr-xr-x. 1 root root  40760 Jul 19  2011 /bin/ping
-rwsr-xr-x. 1 root root  36488 Jul 19  2011 /bin/ping6
-rwsr-xr-x. 1 root root  34904 Jun 22  2012 /bin/su
-rwsr-xr-x. 1 root root  50496 Nov  5 05:21 /bin/umount
-rwsr-x---. 1 root dbus  46232 Sep 13 13:04 /lib64/dbus-1/dbus-daemon-launch-helper
-rwsr-xr-x. 1 root root  10272 Apr 16  2012 /sbin/pam_timestamp_check
-rwsr-xr-x. 1 root root  34840 Apr 16  2012 /sbin/unix_chkpwd
-rwsr-xr-x. 1 root root  54240 Jan 30  2012 /usr/bin/at
-rwsr-xr-x. 1 root root  66352 Dec  7  2011 /usr/bin/chage
-rws--x--x. 1 root root  20184 Nov  5 05:21 /usr/bin/chfn
-rws--x--x. 1 root root  20056 Nov  5 05:21 /usr/bin/chsh
-rwsr-xr-x. 1 root root  47520 Jul 19  2011 /usr/bin/crontab
-rwsr-xr-x. 1 root root  71480 Dec  7  2011 /usr/bin/gpasswd
-rwsr-xr-x. 1 root root  36144 Dec  7  2011 /usr/bin/newgrp
-rwsr-xr-x. 1 root root  30768 Feb 22  2012 /usr/bin/passwd
---s--x--x. 2 root root 219272 Aug  6  2012 /usr/bin/sudo
---s--x--x. 2 root root 219272 Aug  6  2012 /usr/bin/sudoedit
-rwsr-xr-x. 1 root root 224912 Nov  9 07:49 /usr/libexec/openssh/ssh-keysign
-rws--x--x. 1 root root  14280 Jan 31 06:30 /usr/libexec/pt_chown
-rwsr-xr-x. 1 root root   9000 Sep 17 05:55 /usr/sbin/usernetctl
</code></p>

<p><a name="openbsd"></a></p>

<h4>OpenBSD 5.2 (3)</h4>

<p><a href="#top">back to top</a>
<code>bash
-r-sr-xr-x  1 root  bin       242808 Aug  1  2012 /sbin/ping-r-sr-xr-x  1 root  bin       263288 Aug  1  2012 /sbin/ping6
-r-sr-x---  1 root  operator  222328 Aug  1  2012 /sbin/shutdown
</code></p>

<p><a name="openindiana"></a></p>

<h4>OpenIndiana 11 (53)</h4>

<p><a href="#top">back to top</a>
<code>bash
-rwsr-xr-x   1 root     bin        64232 Jun 30  2012 /sbin/wificonfig--wS--lr-x   1 root     root           0 Dec 11 15:20 /media/.hal-mtab-lock
-r-sr-xr-x   1 root     bin       206316 Dec 11 21:00 /usr/lib/ssh/ssh-keysign
-rwsr-xr-x   1 root     adm        12140 Jun 30  2012 /usr/lib/acct/accton
-r-sr-xr-x   1 root     bin        23200 Jun 30  2012 /usr/lib/fs/ufs/quota
-r-sr-xr-x   1 root     bin       111468 Jun 30  2012 /usr/lib/fs/ufs/ufsrestore
-r-sr-xr-x   1 root     bin       106964 Jun 30  2012 /usr/lib/fs/ufs/ufsdump
-r-sr-xr-x   1 root     bin        18032 Jun 30  2012 /usr/lib/fs/smbfs/umount
-r-sr-xr-x   1 root     bin        18956 Jun 30  2012 /usr/lib/fs/smbfs/mount
-r-sr-xr-x   1 root     bin        12896 Jun 30  2012 /usr/lib/utmp_update
-r-sr-xr-x   1 root     bin        35212 Jun 30  2012 /usr/bin/fdformat
-r-s--x--x   2 root     bin       188080 Jun 30  2012 /usr/bin/sudoedit
-r-sr-xr-x   1 root     sys        34876 Jun 30  2012 /usr/bin/su
-r-sr-xr-x   1 root     bin        42504 Jun 30  2012 /usr/bin/login
-r-sr-xr-x   1 root     bin       257288 Jun 30  2012 /usr/bin/pppd
-r-sr-xr-x   1 root     sys        46208 Jun 30  2012 /usr/bin/chkey
-r-sr-xr-x   1 root     sys        29528 Jun 30  2012 /usr/bin/amd64/newtask
-r-sr-xr-x   2 root     bin        24432 Jun 30  2012 /usr/bin/amd64/w
-r-sr-xr-x   1 root     bin      3224200 Jun 30  2012 /usr/bin/amd64/Xorg
-r-sr-xr-x   2 root     bin        24432 Jun 30  2012 /usr/bin/amd64/uptime
-rwsr-xr-x   1 root     sys        47804 Jun 30  2012 /usr/bin/at
-r-sr-xr-x   1 root     bin         8028 Jun 30  2012 /usr/bin/mailq
-r-sr-xr-x   1 root     bin        33496 Jun 30  2012 /usr/bin/rsh
-r-sr-xr-x   1 root     bin        68704 Jun 30  2012 /usr/bin/rmformat
-r-sr-sr-x   1 root     sys        31292 Jun 30  2012 /usr/bin/passwd
-rwsr-xr-x   1 root     sys        23328 Jun 30  2012 /usr/bin/atrm
-r-sr-xr-x   1 root     bin        97072 Jun 30  2012 /usr/bin/xlock
-r-sr-xr-x   1 root     bin        78672 Jun 30  2012 /usr/bin/rdist
-r-sr-xr-x   1 root     bin        27072 Jun 30  2012 /usr/bin/sys-suspend
-r-sr-xr-x   1 root     bin        29304 Jun 30  2012 /usr/bin/crontab
-r-sr-xr-x   1 root     bin        53080 Jun 30  2012 /usr/bin/rcp
-r-s--x--x   2 root     bin       188080 Jun 30  2012 /usr/bin/sudo
-r-s--x--x   1 uucp     bin        70624 Jun 30  2012 /usr/bin/tip
-rwsr-xr-x   1 root     sys        18824 Jun 30  2012 /usr/bin/atq
-r-sr-xr-x   1 root     bin       281732 Jun 30  2012 /usr/bin/xscreensaver
-r-sr-xr-x   1 root     bin      2767780 Jun 30  2012 /usr/bin/i86/Xorg
-r-sr-xr-x   1 root     sys        22716 Jun 30  2012 /usr/bin/i86/newtask
-r-sr-xr-x   2 root     bin        22020 Jun 30  2012 /usr/bin/i86/w
-r-sr-xr-x   2 root     bin        22020 Jun 30  2012 /usr/bin/i86/uptime
-rwsr-xr-x   1 root     sys        13636 Jun 30  2012 /usr/bin/newgrp
-r-sr-xr-x   1 root     bin        39224 Jun 30  2012 /usr/bin/rlogin
-rwsr-xr-x   1 svctag   daemon    108964 Jun 30  2012 /usr/bin/stclient
-r-sr-xr-x   1 root     bin        29324 Jun 30  2012 /usr/xpg4/bin/crontab
-rwsr-xr-x   1 root     sys        47912 Jun 30  2012 /usr/xpg4/bin/at
-r-sr-xr-x   3 root     bin        41276 Jun 30  2012 /usr/sbin/deallocate
-rwsr-xr-x   1 root     sys        32828 Jun 30  2012 /usr/sbin/sacadm
-r-sr-xr-x   1 root     bin        46512 Jun 30  2012 /usr/sbin/traceroute
-r-sr-xr-x   1 root     bin        18016 Jun 30  2012 /usr/sbin/i86/whodo
-r-sr-xr-x   1 root     bin        55584 Jun 30  2012 /usr/sbin/ping
-r-sr-xr-x   3 root     bin        41276 Jun 30  2012 /usr/sbin/allocate
-r-sr-xr-x   1 root     bin        37320 Jun 30  2012 /usr/sbin/pmconfig
-r-sr-xr-x   3 root     bin        41276 Jun 30  2012 /usr/sbin/list_devices
-r-sr-xr-x   1 root     bin        24520 Jun 30  2012 /usr/sbin/amd64/whodo
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Securing Ubuntu]]></title>
    <link href="http://joshrendek.com/2013/01/securing-ubuntu/"/>
    <updated>2013-01-17T20:25:00-05:00</updated>
    <id>http://joshrendek.com/2013/01/securing-ubuntu</id>
    <content type="html"><![CDATA[<h2>Table of Contents</h2>

<h4><a href="#initial_setup">Initial Setup</a></h4>

<h4><a href="#iptables_fail2ban">Setting up iptables and Fail2Ban</a></h4>

<h5><span style='padding-left: 20px;'></span><a href="#fail2ban">Fail2Ban</a></h5>

<h5><span style='padding-left: 20px;'></span><a href="#iptables_rules">iptables rules</a></h5>

<h4><a href="#shared_memory">Make shared memory read-only</a></h4>

<h4><a href="#bastille">Setting up Bastille Linux</a></h4>

<h5><span style='padding-left: 20px;'></span><a href="#bastille_config">Configuring Bastille</a></h5>

<h4><a href="#sysctl">sysctl hardening</a></h4>

<h4><a href="#chroot">Setting up a chroot environment</a></h4>

<h4><a href="#nginx">Securing nginx inside the chroot</a></h4>

<h4><a href="#extras">Extras</a></h4>

<p><a name="initial_setup"></a></p>

<h2>Initial Setup</h2>

<p>Let&rsquo;s login to our new machine and take some initial steps to secure our system. For this article I&rsquo;m going to assume your username is <code>ubuntu</code>.</p>

<p>If you need to, setup your sudoers file by adding the following lines:</p>

<pre><code class="bash /etc/sudoers">ubuntu ALL=(ALL:ALL) ALL # put this in the "User privilege specification" section
</code></pre>

<p>Edit your <code>~/.ssh/authorized_keys</code> and put your public key inside it. Make sure you can login without a password now once your key is in place.</p>

<p>Open up <code>/etc/ssh/sshd_config</code> and make sure these lines exist to secure SSH:
&#8220;` bash /etc/ssh/sshd_config</p>

<h1>Only allow version 2 communications, version 1 has known vulnerabilities</h1>

<p>Protocol 2</p>

<h1>Disable root login over ssh</h1>

<p>PermitRootLogin no</p>

<h1>Load authorized keys files from a users home directory</h1>

<p>AuthorizedKeysFile  %h/.ssh/authorized_keys</p>

<h1>Don&rsquo;t allow empty passwords to be used to authenticate</h1>

<p>PermitEmptyPasswords no</p>

<h1>Disable password auth, you must use ssh keys</h1>

<p>PasswordAuthentication no
&#8220;`</p>

<p>Keep your current session open and restart sshd:
<code>
sudo service ssh restart
</code></p>

<p>Make sure you can login from another terminal. If you can, move on.</p>

<p>Now we need to update and upgrade to make sure all of our packages are up to date and install two pre-requisites for later in the article: build-essential and ntp.</p>

<pre><code class="bash apt">sudo apt-get update 
sudo apt-get install build-essential ntp
sudo apt-get upgrade
sudo reboot
</code></pre>

<p><a name="iptables_fail2ban"></a></p>

<h2>Setting up iptables and Fail2Ban</h2>

<p><a name="fail2ban"></a></p>

<h3>Fail2Ban</h3>

<pre><code>sudo apt-get install fail2ban 
</code></pre>

<p>Open up the fail2ban config and change the ban time, destemail, and maxretry:</p>

<pre><code class="bash /etc/fail2ban/jail.conf ">[DEFAULT]
ignoreip = 127.0.0.1/8
bantime  = 3600
maxretry = 2
destemail = ubuntu@yourdomain.com
action = %(action_mw)s

[ssh]

enabled  = true
port     = ssh
filter   = sshd
logpath  = /var/log/auth.log
maxretry = 2
</code></pre>

<p>Now restart fail2ban.</p>

<pre><code>sudo service fail2ban restart 
</code></pre>

<p>If you try and login from another machine and fail, you should see the ip in iptables.
&#8220;`</p>

<h1>sudo iptables -L</h1>

<p>Chain fail2ban-ssh (1 references)
target     prot opt source               destination       <br/>
DROP       all  &ndash;  li203-XX.members.linode.com  anywhere          <br/>
RETURN     all  &ndash;  anywhere             anywhere
&#8220;`</p>

<p><a name="iptables_rules"></a></p>

<h3>iptables Rules</h3>

<p>Here are my default iptables rules, it opens up port 80 and 443 for HTTP/HTTPS communication, and allows port 22.
We also allow ping and then log all denied calls and then reject everything else. If you have other services you need to run, such as a game server or something else, you&rsquo;ll have to add the rules to open up the ports in the iptables config.</p>

<pre><code class="text /etc/iptables.up.rules ">*filter

# Accepts all established inbound connections
 -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT

# Allows all outbound traffic
# You could modify this to only allow certain traffic
 -A OUTPUT -j ACCEPT

# Allows HTTP and HTTPS connections from anywhere (the normal ports for websites)
 -A INPUT -p tcp --dport 443 -j ACCEPT
 -A INPUT -p tcp --dport 80 -j ACCEPT
# Allows SSH connections for script kiddies
# THE -dport NUMBER IS THE SAME ONE YOU SET UP IN THE SSHD_CONFIG FILE
 -A INPUT -p tcp -m state --state NEW --dport 22 -j ACCEPT

# Now you should read up on iptables rules and consider whether ssh access 
# for everyone is really desired. Most likely you will only allow access from certain IPs.

# Allow ping
 -A INPUT -p icmp -m icmp --icmp-type 8 -j ACCEPT

# log iptables denied calls (access via 'dmesg' command)
 -A INPUT -m limit --limit 5/min -j LOG --log-prefix "iptables denied: " --log-level 7

# Reject all other inbound - default deny unless explicitly allowed policy:
 -A INPUT -j REJECT
 -A FORWARD -j REJECT

COMMIT
</code></pre>

<p>We can load that up into iptables:
<code>bash
sudo iptables-restore &lt; /etc/iptables.up.rules
</code></p>

<p>Make sure it loads on boot by putting it into the if-up scripts:
&#8220;` bash /etc/network/if-up.d/iptables</p>

<h1>!/bin/sh</h1>

<p>iptables-restore /etc/iptables.up.rules
&#8220;`</p>

<p>Now make it executable:
<code>bash
chmod +x /etc/network/if-up.d/iptables
</code></p>

<p>Rebooting here is optional, I usually reboot after major changes to make sure everything boots up properly.</p>

<p>If you&rsquo;re getting hit by scanners or brute-force attacks, you&rsquo;ll see a line similar to this in your <code>/var/log/syslog</code>:
<code>
Jan 18 03:30:37 localhost kernel: [   79.631680] iptables denied: IN=eth0 OUT= MAC=04:01:01:40:70:01:00:12:f2:c6:e8:00:08:00 SRC=87.13.110.30 DST=192.34.XX.XX LEN=64 TOS=0x00 PREC=0x00 TTL=34 ID=57021 DF PROTO=TCP SPT=1253 DPT=135 WINDOW=53760 RES=0x00 SYN URGP=0
</code></p>

<p><a name="shared_memory"></a></p>

<h2>Read only shared memory</h2>

<p>A common exploit vector is going through shared memory (which can let you change the UID of running programs and other malicious actions). It can also be used as a place to drop files once an initial breakin has been made. An example of one such exploit is available <a href="http://www.juniper.net/security/auto/vulnerabilities/vuln17587.html">here</a>.</p>

<p>Open <code>/etc/fstab/</code>:
<code>bash /etc/fstab
tmpfs     /dev/shm     tmpfs     defaults,ro     0     0
</code></p>

<p>Once you do this you need to reboot.</p>

<p><a name="bastille"></a></p>

<h2>Setting up Bastille Linux</h2>

<p><blockquote><p>The Bastille Hardening program &ldquo;locks down&rdquo; an operating system, proactively configuring the system for increased security and decreasing its susceptibility to compromise. Bastille can also assess a system&rsquo;s current state of hardening, granularly reporting on each of the security settings with which it works.</p><footer><strong>Bastille Linux <a href="http://bastille-linux.sourceforge.net/">http://bastille-linux.sourceforge.net/</a></strong></footer></blockquote></p>

<pre><code class="bash Bastille: Installation and Setup">sudo apt-get install bastille # choose Internet site for postfix
# configure bastille
sudo bastille 
</code></pre>

<p>After you run that command you&rsquo;ll be prompted to configure your system, here are the options I chose:</p>

<p><a name="bastille_config"></a></p>

<h3>Configuring Bastille</h3>

<ul>
<li>File permissions module: Yes (suid)</li>
<li>Disable SUID for mount/umount: Yes</li>
<li>Disable SUID on ping: Yes</li>
<li>Disable clear-text r-protocols that use IP-based authentication? Yes</li>
<li>Enforce password aging? No (situation dependent, I have no users accessing my machines except me, and I only allow ssh keys)</li>
<li>Default umask: Yes</li>
<li>Umask: 077</li>
<li>Disable root login on tty&rsquo;s 1-6: No</li>
<li>Password protect GRUB prompt: No (situation dependent, I&rsquo;m on a VPS and would like to get support in case I need it)</li>
<li>Password protect su mode: Yes</li>
<li>default-deny on tcp-wrappers and xinetd? No</li>
<li>Ensure telnet doesn&rsquo;t run? Yes</li>
<li>Ensure FTP does not run? Yes</li>
<li>display authorized use message? No (situation dependent, if you had other users, Yes)</li>
<li>Put limits on system resource usage? Yes</li>
<li>Restrict console access to group of users? Yes (then choose root)</li>
<li>Add additional logging? Yes</li>
<li>Setup remote logging if you have a remote log host, I don&rsquo;t so I answered No</li>
<li>Setup process accounting? Yes</li>
<li>Disable acpid? Yes</li>
<li>Deactivate nfs + samba? Yes (situation dependent)</li>
<li>Stop sendmail from running in daemon mode? No (I have this firewalled off, so I&rsquo;m not concerned)</li>
<li>Deactivate apache? Yes</li>
<li>Disable printing? Yes</li>
<li>TMPDIR/TMP scripts? No (if a multi-user system, yes)</li>
<li>Packet filtering script? No (we configured the firewall previously)</li>
<li>Finished? YES! &amp; reboot</li>
</ul>


<p>You can verify some of these changes by testing them out, for instance, the SUID change on ping:</p>

<pre><code class="bash Bastille: Verifying changes">ubuntu@app1:~$ ping google.com
ping: icmp open socket: Operation not permitted
ubuntu@app1:~$ sudo ping google.com
PING google.com (74.125.228.72) 56(84) bytes of data.
64 bytes from iad23s07-in-f8.1e100.net (74.125.228.72): icmp_req=1 ttl=55 time=9.06 ms
^C
--- google.com ping statistics ---
1 packets transmitted, 1 received, 0% packet loss, time 0ms
rtt min/avg/max/mdev = 9.067/9.067/9.067/0.000 ms
</code></pre>

<p><a name="sysctl"></a></p>

<h2>Sysctl hardening</h2>

<p>Since our machine isn&rsquo;t running as a router and is going to be running as an application/web server, there are additional
steps we can take to secure the machine. Many of these are from the NSA&rsquo;s security guide, which you can read in its entirety
<a href="http://www.nsa.gov/ia/_files/os/redhat/rhel5-guide-i731.pdf">here</a>.</p>

<pre><code class="bash /etc/sysctl.conf http://www.nsa.gov/ia/_files/os/redhat/rhel5-guide-i731.pdf Source"># Protect ICMP attacks
net.ipv4.icmp_echo_ignore_broadcasts = 1

# Turn on protection for bad icmp error messages
net.ipv4.icmp_ignore_bogus_error_responses = 1

# Turn on syncookies for SYN flood attack protection
net.ipv4.tcp_syncookies = 1

# Log suspcicious packets, such as spoofed, source-routed, and redirect
net.ipv4.conf.all.log_martians = 1
net.ipv4.conf.default.log_martians = 1

# Disables these ipv4 features, not very legitimate uses
net.ipv4.conf.all.accept_source_route = 0
net.ipv4.conf.default.accept_source_route = 0

# Enables RFC-reccomended source validation (dont use on a router)
net.ipv4.conf.all.rp_filter = 1
net.ipv4.conf.default.rp_filter = 1

# Make sure no one can alter the routing tables
net.ipv4.conf.all.accept_redirects = 0
net.ipv4.conf.default.accept_redirects = 0
net.ipv4.conf.all.secure_redirects = 0
net.ipv4.conf.default.secure_redirects = 0

# Host only (we're not a router)
net.ipv4.ip_forward = 0
net.ipv4.conf.all.send_redirects = 0
net.ipv4.conf.default.send_redirects = 0


# Turn on execshild
kernel.exec-shield = 1
kernel.randomize_va_space = 1

# Tune IPv6
net.ipv6.conf.default.router_solicitations = 0
net.ipv6.conf.default.accept_ra_rtr_pref = 0
net.ipv6.conf.default.accept_ra_pinfo = 0
net.ipv6.conf.default.accept_ra_defrtr = 0
net.ipv6.conf.default.autoconf = 0
net.ipv6.conf.default.dad_transmits = 0
net.ipv6.conf.default.max_addresses = 1

# Optimization for port usefor LBs
# Increase system file descriptor limit
fs.file-max = 65535

# Allow for more PIDs (to reduce rollover problems); may break some programs 32768
kernel.pid_max = 65536

# Increase system IP port limits
net.ipv4.ip_local_port_range = 2000 65000

# Increase TCP max buffer size setable using setsockopt()
net.ipv4.tcp_rmem = 4096 87380 8388608
net.ipv4.tcp_wmem = 4096 87380 8388608

# Increase Linux auto tuning TCP buffer limits
# min, default, and max number of bytes to use
# set max to at least 4MB, or higher if you use very high BDP paths
net.core.rmem_max = 8388608
net.core.wmem_max = 8388608
net.core.netdev_max_backlog = 5000
net.ipv4.tcp_window_scaling = 1
</code></pre>

<p>After making these changes you should reboot.</p>

<p><a name="chroot"></a></p>

<h2>Setting up a chroot environment</h2>

<p>We&rsquo;ll be setting up a chroot environment to run our web server and applications in. Chroot&rsquo;s provide isolation from the rest of the operating system, so even in the event of a application compromise, damage can be mitigated.</p>

<pre><code class="bash chroot: Installation and Setup ">sudo apt-get install debootstrap dchroot
</code></pre>

<p>Now add this to your <code>/etc/schroot/schroot.conf</code> file, precise is the release of Ubuntu I&rsquo;m using, so change it if you need to:</p>

<pre><code class="bash /etc/schroot/schroot.conf ">[precise]
description=Ubuntu Precise LTS 
location=/var/chroot
priority=3
users=ubuntu
groups=sbuild
root-groups=root
</code></pre>

<p>Now bootstrap the chroot with a minimal Ubuntu installation:</p>

<pre><code class="bash ">sudo debootstrap --variant=buildd --arch amd64 precise /var/chroot/ http://mirror.anl.gov/pub/ubuntu/
sudo cp /etc/resolv.conf /var/chroot/etc/resolv.conf
sudo mount -o bind /proc /var/chroot/proc
sudo chroot /var/chroot/
apt-get install ubuntu-minimal
apt-get update 
</code></pre>

<p>Add the following to <code>/etc/apt/sources.list</code> inside the chroot:
<code>bash
deb http://archive.ubuntu.com/ubuntu precise main
deb http://archive.ubuntu.com/ubuntu precise-updates main
deb http://security.ubuntu.com/ubuntu precise-security main
deb http://archive.ubuntu.com/ubuntu precise universe
deb http://archive.ubuntu.com/ubuntu precise-updates universe
</code></p>

<p>Let&rsquo;s test out our chroot and install nginx inside of it:
<code>bash
apt-get update
apt-get install nginx
</code></p>

<p><a name="nginx"></a></p>

<h2>Securing nginx inside the chroot</h2>

<p>First thing we will do is add a www user for nginx to run under:
<code>bash Adding a application user
sudo chroot /var/chroot
useradd www -d /home/www
mkdir /home/www
chown -R www.www /home/www
</code></p>

<p>Open up <code>/etc/nginx/nginx.conf</code> and make sure you change user to www inside the chroot:
<code>bash /etc/nginx/nginx.conf
user www;
</code></p>

<p>We can now start nginx inside the chroot:
<code>bash
sudo chroot /var/chroot
service nginx start
</code></p>

<p>Now if you go to <a href="http://your_vm_ip/">http://your_vm_ip/</a> you should see &ldquo;Welcome to nginx!&rdquo; running inside your fancy new chroot.</p>

<p>We also need to setup ssh to run inside the chroot so we can deploy our applications more easily.</p>

<pre><code class="bash Chroot: sshd ">sudo chroot /var/chroot 
apt-get install openssh-server udev
</code></pre>

<p>Since we already have SSH for the main host running on 22, we&rsquo;re going to run SSH for the chroot on port 2222. We&rsquo;ll copy over our config from outside the chroot to the chroot.</p>

<pre><code class="bash sshd config">sudo cp /etc/ssh/sshd_config /var/chroot/etc/ssh/sshd_config
</code></pre>

<p>Now open the config and change the bind port to 2222.</p>

<p>We also need to add the rules to our firewall script:
&#8220;` bash /etc/iptables.up.rules</p>

<h1>Chroot ssh</h1>

<p> -A INPUT -p tcp -m state &ndash;state NEW &ndash;dport 2222 -j ACCEPT
&#8220;`</p>

<p>Now make a startup script for chroot-precise in `/etc/init.d/chroot-precise:
<code>bash /etc/init.d/chroot-precise
mount -o bind /proc /var/chroot/proc
mount -o bind /dev /var/chroot/dev
mount -o bind /sys /var/chroot/sys
mount -o bind /dev/pts /var/chroot/dev/pts
chroot /var/chroot service nginx start
chroot /var/chroot service ssh start
</code></p>

<p>Set it to executable and to start at boot:
<code>bash
sudo chmod +x /etc/init.d/chroot-precise
sudo update-rc.d chroot-precise defaults
</code></p>

<p>Next is to put your public key inside the <code>.ssh/authorized_keys</code> file for the www user inside the chroot so you can ssh and deploy your applications.</p>

<p>If you want, you can test your server and reboot it now to ensure nginx and ssh boot up properly. If it&rsquo;s not running right now, you start it: <code>sudo /etc/init.d/chroot-precise</code>.</p>

<p>You should now be able to ssh into your chroot and main server without a password.</p>

<p><a name="extras"></a></p>

<h2>Extras</h2>

<p>I would like to also mention the <a href="http://grsecurity.net/">GRSecurity kernel patch</a>. I had tried several times to install this (two different versions were released while I was writing this) and both make the kernel unable to compile. Hopefully they&rsquo;ll fix these bugs and I&rsquo;ll be able to update this article with notes on setting GRSecurity up as well.</p>

<p>I hope this article proved useful to anyone trying to secure a Ubuntu system, and if you liked it please share it!</p>
]]></content>
  </entry>
  
</feed>
