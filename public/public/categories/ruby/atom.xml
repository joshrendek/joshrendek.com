<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | Josh Rendek]]></title>
  <link href="http://joshrendek.com/categories/ruby/atom.xml" rel="self"/>
  <link href="http://joshrendek.com/"/>
  <updated>2016-12-15T16:05:34-05:00</updated>
  <id>http://joshrendek.com/</id>
  <author>
    <name><![CDATA[Josh Rendek]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[2 Patterns for Refactoring With Your Ruby Application]]></title>
    <link href="http://joshrendek.com/2013/11/2-patterns-for-refactoring-with-your-ruby-application/"/>
    <updated>2013-11-15T21:55:00-05:00</updated>
    <id>http://joshrendek.com/2013/11/2-patterns-for-refactoring-with-your-ruby-application</id>
    <content type="html"><![CDATA[<p>When working on a rails application you can sometimes find duplicated or very similar code between two different controllers (for instance a UI element and an API endpoint).
Realizing that you have this duplication there are several things you can do. I&rsquo;m going to go over how to extract this code out into the
query object pattern <sup><a href="http://www.martinfowler.com/eaaCatalog/queryObject.html">1</a></sup>
and clean up our constructor using the builder pattern <sup><a href="http://en.wikipedia.org/wiki/Builder_pattern">2</a></sup> adapted to ruby.</p>

<p>I&rsquo;m going to make a few assumptions here, but this should be applicable to any
data access layer of your application. I&rsquo;m also assuming you&rsquo;re using something like Kaminari for pagination and have a model
for <code>People</code>.</p>

<pre><code class="ruby dummy_controller.rb">
def index
  page = params[:page] || 1
  per_page = params[:per_page] || 50
  name = params[:name]
  sort = params[:sort_by] || 'last_name'
  direction = params[:sort_direction] || 'asc'

  query = People
  query = query.where(name: name) if name.present?
  @results = query.order("#{sort} #{direction}").page(page).per_page(per_page)
end
</code></pre>

<p>So we see this duplicated elsehwere in the code base and we want to clean it up. Lets first start by extracting this out into a new class called <code>PeopleQuery</code>.</p>

<p>I usually put these under <code>app/queries</code> in my rails application.</p>

<pre><code class="ruby people_query.rb">
class PeopleQuery
  attr_accessor :page, :per_page, :name, :sort, :direction, :query
  def initialize(page, per_page, name, sort, direction)
    self.page = page || 1
    self.per_page = per_page || 50
    self.name = name
    self.sort = sort || 'last_name'
    self.direction = direction || 'asc'
    self.query = People
  end

  def build
    self.query = self.query.where(name: self.name) if self.name.present?
    self.query.order("#{self.sort} #{self.direction}").page(self.page).per_page(self.per_page)
  end
end
</code></pre>

<p>Now our controller looks like this:</p>

<pre><code class="ruby dummy_controller.rb">
def index
  query = PeopleQuery.new(params[:page], params[:per_page], params[:name], params[:sort], params[:direction])
  @results = query.build
end
</code></pre>

<p>Much better! We&rsquo;ve decoupled our control from our data access object (<code>People</code>/ActiveRecord), moved some of the query logic outside of the controller and into
a specific class meant to deal with building it. But that constructor doesn&rsquo;t look very nice. We can do better since we&rsquo;re using ruby.</p>

<p>Our new <code>PeopleQuery</code> class will look like this and will use a block to initialize itself instead of a long list of constructor arguments.</p>

<pre><code>class PeopleQuery
  attr_accessor :page, :per_page, :name, :sort, :direction, :query
  def initialize(&amp;block)
    yield self
    self.page ||= 1
    self.per_page =|| 50
    self.sort ||= 'last_name'
    self.direction ||= 'asc'
    self.query = People
  end

  def build
    self.query = self.query.where(name: self.name) if self.name.present?
    self.query.order("#{self.sort} #{self.direction}").page(self.page).per_page(self.per_page)
  end
end
</code></pre>

<p>We yield first to let the caller set the values and then after yielding we set our default values if they weren&rsquo;t passed in. There is another method of doing this
with <code>instance_eval</code> but you end up losing variable scope and the constructor looks worse since you have to start passing around the params variable to get access to it, so we&rsquo;re
going to stick with yield.</p>

<pre><code class="ruby dummy_controller.rb">
def index
  query = PeopleQuery.new do |query|
    query.page = params[:page]
    query.per_page = params[:per_page]
    query.name = params[:name]
    query.sort = params[:sort]
    query.direction = params[:direction]
  end
  @results = query.build
end
</code></pre>

<p>And that&rsquo;s it! We&rsquo;ve de-duplicated some code (remember we assumed dummy controller&rsquo;s index method was duplicated elsewhere in an API call in a seperate namespaced controller),
extracted out a common query object, decoupled our controller from ActiveRecord, and built up a nice way to construct the query object using the builder pattern.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[From 0 to Testing on Windows With JRuby]]></title>
    <link href="http://joshrendek.com/2013/07/from-0-to-testing-on-windows-with-jruby/"/>
    <updated>2013-07-17T22:46:00-04:00</updated>
    <id>http://joshrendek.com/2013/07/from-0-to-testing-on-windows-with-jruby</id>
    <content type="html"><![CDATA[<p>Testing is one of the most important parts of software development and helps to ensure
bugs don&rsquo;t get into production and that code can be refactored safely.
If you&rsquo;re working on a team with multiple people with different skill sets,
you might have people doing testing who only know windows and development is only
using OSX or Linux. We want everyone to be able to test - someone in QA who is familiar
with Windows shouldn&rsquo;t have to throw away all that knowledge, install Linux, and start from scratch.
Enter JRuby and John.</p>

<p>John is our tester and he is running windows. He wants to help make sure that when a user
goes to <code>http://google.com/</code> that a button appears with the text &ldquo;Google Search&rdquo;.
The quick way to do this is to open his browser, navigate to <code>http://google.com/</code>
glance through the page for the button and confirm that its there.
John has a problem though, he has 30 other test cases to run and the developers are pushing code to the frontpage
several times a day; John now has to continously do this manually everytime code is touched and
his test load is piling up.</p>

<p>So let&rsquo;s help John out and install <a href="http://sublimetext.com/2">Sublime Text 2</a> and <a href="http://jruby.org/">JRuby</a>.</p>

<p><img src="/images/jrubytesting/download-sublime.png" alt="" /></p>

<p>Start by downloading the 64-bit version of Sublime Text.
Make sure to add the context menu when going through the install process.</p>

<p><img src="/images/jrubytesting/slt-setup.png" alt="" /></p>

<p>Now we&rsquo;ll visit the JRuby homepage and download the 64 bit installer.</p>

<p><img src="/images/jrubytesting/dl-jruby.png" alt="" /></p>

<p>Go through the installer and let JRuby set your path so you can access ruby from <code>cmd.exe</code></p>

<p><img src="/images/jrubytesting/jruby-path.png" alt="" /></p>

<p>Now when we open <code>cmd.exe</code> and type <code>jruby -v</code> we&rsquo;ll be able to see that it was installed.</p>

<p><img src="/images/jrubytesting/jruby-cmd.png" alt="" /></p>

<p>Now that we have our tools installed lets setup our test directory on the Desktop.
Inside our <code>testing</code> folder we&rsquo;ll create a folder called <code>TestDemo</code> for our tests for the Demo project.</p>

<p><img src="/images/jrubytesting/testdemo-folder.png" alt="" /></p>

<p>Next we&rsquo;ll open Sublime Text and go to <code>File &gt; Open Folder</code> and navigate to our <code>TestDemo</code> folder and hit open.</p>

<p><img src="/images/jrubytesting/slt-openfolder.png" alt="" /></p>

<p>Now we can continue making our directory structure inside Sublime Text. Since we&rsquo;re going to use <code>rspec</code>
we need to create a folder called <code>spec</code> to contain all of our tests. Right click on the <code>TestDemo</code> in the
tree navigation and click <code>New Folder</code>.</p>

<p><img src="/images/jrubytesting/slt-newfolder.png" alt="" /></p>

<p>Call the folder <code>spec</code> in the bottom title bar when it prompts you for the folder name.</p>

<p>Next we&rsquo;ll create our Gemfile which will declare all of our dependencies - so make a file in the project root called
<code>Gemfile</code> and put the our dependencies in it:</p>

<pre><code class="ruby Gemfile">source "https://rubygems.org"

gem "rspec"
gem "selenium"
gem "selenium-webdriver"
gem "capybara"
</code></pre>

<p>Once we have that file created, open <code>cmd.exe</code> and switch to your project&rsquo;s root directory.</p>

<p>Type <code>jgem install bundler</code> to install <code>bundler</code> which manages ruby dependencies.</p>

<p><img src="/images/jrubytesting/bundler.png" alt="" /></p>

<p>While still at the command prompt we&rsquo;re going to <code>bundle</code> to install our dependencies:</p>

<p><img src="/images/jrubytesting/bundle.png" alt="" /></p>

<p>After that finishes we need to run one last command for <code>selenium</code> to work properly: <code>selenium install</code></p>

<p><img src="/images/jrubytesting/selenium-install.png" alt="" /></p>

<p>We also need a <code>spec_helper.rb</code> file inside our <code>spec</code> directory.</p>

<pre><code class="ruby specs\spec_helper.rb">require "rspec"
require "selenium"
require "capybara/rspec"

Capybara.default_driver =  :selenium
</code></pre>

<p>We&rsquo;ve now setup our rspec folders, our Gemfile with dependencies, and installed them. Now we can write
the test that will save John a ton of time.</p>

<p>Chrome comes with a simple tool to get XPath paths so we&rsquo;re going to use that to get the XPath
for the search button. Right click on the &ldquo;Google Search&rdquo; button and click <code>Inspect element</code></p>

<p><img src="/images/jrubytesting/google-inspect.png" alt="" /></p>

<p>Right click on the highlighted element and hit <code>Copy XPath</code>.</p>

<p><img src="/images/jrubytesting/google-xpath.png" alt="" /></p>

<p>Now we&rsquo;re going to make our spec file and call it <code>homepage_spec.rb</code> and locate it under <code>spec\integration</code>.</p>

<p>Here is a picture showing the directory structure and files:
<img src="/images/jrubytesting/homepage-spec.png" alt="" /></p>

<p>Here is the spec file with comments explaining each part:
&#8220;` ruby spec\integration\homepage_spec.rb</p>

<h1>This loads the spec helper file that we required everything in</h1>

<p>require &ldquo;spec_helper&rdquo;</p>

<h1>This is the outer level description of the test</h1>

<h1>For this example it describes going to the homepage of Google.com</h1>

<h1>Setting the feature type is necessary if you have</h1>

<h1>Capybara specs outside of the spec\features folder</h1>

<p>describe &ldquo;Going to google.com&rdquo;, :type => :feature do</p>

<p>  # Context is like testing a specific component of the homepage, in this case
  # its the search button
  context &ldquo;The search button&rdquo; do
    # This is our actual test where we give it a meaningful test description
    it &ldquo;should contain the text &lsquo;Google Search&rsquo;&rdquo; do
      visit &ldquo;<a href="http://google.com/">http://google.com/</a>&rdquo; # Opens Firefox and visits google
      button = find(:xpath, &lsquo;//*[@id=gbqfba&#8221;&rsquo;) # find an object on the page by its XPath path
      # This uses an rspec assertion saying that the string returned
      # by button.text is equal to &ldquo;Google Search&rdquo;
      button.text.should eq(&ldquo;Google Seearch&rdquo;)</p>

<pre><code>end
</code></pre>

<p>  end</p>

<p>end</p>

<p>&#8220;`</p>

<p>Now we can tab back to our <code>cmd.exe</code> prompt and run our tests!
<code>rspec spec</code> will run all your tests under the <code>spec</code> folder.
<img src="/images/jrubytesting/rspec-spec.png" alt="" /></p>

<h3>Things to take note of</h3>

<p>This example scenario is showing how to automate browser testing to do end-to-end tests on a product using rspec.
This is by no means everything you can do with rspec and ruby - you can SSH, hit APIs and parse JSON, and do anything
you want with the ability to make assertions.</p>

<p>A lot is going on in these examples - there are plenty of resources out there on google and other websites
that provide more rspec examples and ruby examples.</p>

<p>We also showed how to add dependencies and install them using <code>bundler</code>.
Two of the best resources for finding libraries and other gems is
<a href="http://rubygems.org/">RubyGems</a> and <a href="http://ruby-toolbox.com/">Ruby-Toolbox</a> - the only thing to take note of
is anything saying to be a native C extension (they won&rsquo;t work with JRuby out of the box).</p>

<p>My last note is that you also need to have firefox installed as well - Selenium will work with Chrome but I&rsquo;ve found it to be a
hassle to setup (and unless you really need Chrome), the default of Firefox will work great.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Simple Ruby Plugin System]]></title>
    <link href="http://joshrendek.com/2013/07/a-simple-ruby-plugin-system/"/>
    <updated>2013-07-04T15:00:00-04:00</updated>
    <id>http://joshrendek.com/2013/07/a-simple-ruby-plugin-system</id>
    <content type="html"><![CDATA[<p>Let&rsquo;s start out with a simple directory structure:</p>

<pre><code class="bash">.
├── plugin.rb
├── main.rb
└── plugins
    ├── cat.rb
    └── dog.rb

1 directory, 3 files
</code></pre>

<p>All the plugins we will use for our library will be loaded from <code>plugins</code>. Now lets make a simple
<code>Plugin</code> class and register our plugins.</p>

<pre><code class="ruby plugin.rb">
class Plugin
  # Keep the plugin list inside a set so we don't double-load plugins
  @plugins = Set.new

  def self.plugins
    @plugins
  end

  def self.register_plugins
    # Iterate over each symbol in the object space
    Object.constants.each do |klass|
      # Get the constant from the Kernel using the symbol
      const = Kernel.const_get(klass)
      # Check if the plugin has a super class and if the type is Plugin
      if const.respond_to?(:superclass) and const.superclass == Plugin
        @plugins &lt;&lt; const
      end
    end
  end
end
</code></pre>

<p>We&rsquo;ve now made a simple class that will contain all of our plugin data when we call <code>register_plugins</code>.</p>

<p>Now for our Dog and Cat classes:</p>

<pre><code class="ruby dog.rb">class DogPlugin &lt; Plugin

  def handle_command(cmd)
    p "Command received #{cmd}"
  end

end
</code></pre>

<pre><code class="ruby cat.rb">class CatPlugin &lt; Plugin

  def handle_command(cmd)
    p "Command received #{cmd}"
  end

end
</code></pre>

<p>Now combine this all together in one main entry point and we have a simple plugin system that lets us
send messages to each plugin through a set method ( <code>handle_command</code> ).</p>

<pre><code class="ruby main.rb">
require './plugin'
Dir["./plugins/*.rb"].each { |f| require f }
Plugin.register_plugins

# Test that we can send a message to each plugin
Plugin.plugins.each do |plugin|
  plugin.handle_command('test')
end
</code></pre>

<p>This is a very simple but useful way to make a plugin system to componentize projects like a chat bot for IRC.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rb RFO Status: A Simple System Status Page in Ruby]]></title>
    <link href="http://joshrendek.com/2012/12/rb-rfo-status-simple-system-status-page-in-ruby/"/>
    <updated>2012-12-25T13:39:00-05:00</updated>
    <id>http://joshrendek.com/2012/12/rb-rfo-status-simple-system-status-page-in-ruby</id>
    <content type="html"><![CDATA[<p><em>Rb RFO Status</em> is a simple system to post status updates to your team or customers in a easy to understand format so there is no delay in reporting a reason for outage.
It is modeled slightly after the <a href="http://status.heroku.com/">Heroku Status Page</a>.</p>

<p><strong>Source</strong>: <a href="https://github.com/bluescripts/rb_rfo_status">https://github.com/bluescripts/rb_rfo_status</a></p>

<p><strong>Download</strong>: <a href="https://s3.amazonaws.com/josh-opensource/rb_rfo_status-0.1.war">https://s3.amazonaws.com/josh-opensource/rb_rfo_status-0.1.war</a></p>

<p>It is licensed under the <em>MIT License</em> so do whatever you want with it!</p>

<p>I&rsquo;ve already opened up a few issues on Github that are enhancements, but this serves as a super simple application to deploy to keep your customers and team informed of system states.</p>

<h2>Installation</h2>

<p>Download the .war file and deploy it in your favorite container (Tomcat, etc). Once the war file is extracted you can modify the config settings and start it.</p>

<p>To run migrations on an extracted WAR file:</p>

<pre><code>cd rb_rfo_status/WEB-INF
sudo RAILS_ENV=production BUNDLE_WITHOUT=development:test BUNDLE_GEMFILE=Gemfile GEM_HOME=gems java -cp lib/jruby-core-1.7.1.jar:lib/jruby-stdlib-1.7.1.jar:lib/gems-gems-activerecord-jdbc-adapter-1.2.2.1-lib-arjdbc-jdbc-adapter_java.jar:lib/gems-gems-jdbc-mysql-5.1.13-lib-mysql-connector-java-5.1.13.jar org.jruby.Main -S rake db:migrate
</code></pre>

<h2>Screenshots</h2>

<h3>Homepage</h3>

<p><img class="<a" src="href="https://www.evernote.com/shard/s4/sh/dd1aa9b9-cfcf-4257-af11-3d17d3f1e8dd/c7917a5540f04a60eacad189479e799c/res/6a125eeb-21c8-4f96-9ced-21169a89c527/skitch.png">https://www.evernote.com/shard/s4/sh/dd1aa9b9-cfcf-4257-af11-3d17d3f1e8dd/c7917a5540f04a60eacad189479e799c/res/6a125eeb-21c8-4f96-9ced-21169a89c527/skitch.png</a>&#8221;></p>

<h3>Creating an Incident</h3>

<p><img class="<a" src="href="https://www.evernote.com/shard/s4/sh/29176e2c-d770-4c6d-a593-369786d9079d/4c564af13979ba3d5e272c836cc830a2/res/bd810786-94fc-4652-86e1-27885f12bad8/skitch.png?resizeSmall&amp;width=832">https://www.evernote.com/shard/s4/sh/29176e2c-d770-4c6d-a593-369786d9079d/4c564af13979ba3d5e272c836cc830a2/res/bd810786-94fc-4652-86e1-27885f12bad8/skitch.png?resizeSmall&amp;width=832</a>&#8221;></p>

<h3>Updating an incident</h3>

<p><img class="<a" src="href="https://www.evernote.com/shard/s4/sh/84afb640-b46c-40eb-9b30-00583685b7a5/915d77b53e7755498e1ef98a86c1ee57/res/8eabf163-959c-4f31-bf88-cbeb6d97dc77/skitch.png?resizeSmall&amp;width=832">https://www.evernote.com/shard/s4/sh/84afb640-b46c-40eb-9b30-00583685b7a5/915d77b53e7755498e1ef98a86c1ee57/res/8eabf163-959c-4f31-bf88-cbeb6d97dc77/skitch.png?resizeSmall&amp;width=832</a>&#8221;></p>

<h3>A resolved incident</h3>

<p><img class="<a" src="href="https://www.evernote.com/shard/s4/sh/d0449a09-75e1-47bc-8bc9-7073b76bfdaa/7c68e52c97dc1b912c408f9f0c5bded0/res/b077981e-37e0-4e2b-a8e4-abc1ae092033/skitch.png?resizeSmall&amp;width=832">https://www.evernote.com/shard/s4/sh/d0449a09-75e1-47bc-8bc9-7073b76bfdaa/7c68e52c97dc1b912c408f9f0c5bded0/res/b077981e-37e0-4e2b-a8e4-abc1ae092033/skitch.png?resizeSmall&amp;width=832</a>&#8221;></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dealing With Cascading Failures With Chef Server]]></title>
    <link href="http://joshrendek.com/2012/12/dealing-with-cascading-failures-with-chef-server/"/>
    <updated>2012-12-06T23:23:00-05:00</updated>
    <id>http://joshrendek.com/2012/12/dealing-with-cascading-failures-with-chef-server</id>
    <content type="html"><![CDATA[<p><a href="http://www.opscode.com/">Chef</a> is awesome. Being able to recreate your entire environment from a recipe is an inredibly powerful tool, and I had started using Chef a few months ago. When I had initially configured the Chef server I hadn&rsquo;t paid much attention to the couchdb portion of it until I had a chef-server hiccup. Here are a few things to watch out for when running chef-server:</p>

<ul>
<li>Setup CouchDB <a href="http://wiki.apache.org/couchdb/Compaction">compaction</a> - Chef had a CouchDB size of 30+GB (after compaction it was only a few megabytes).</li>
<li>When resizing instances, make sure you setup RabbitMQ to use a <a href="http://www.rabbitmq.com/configure.html">NODENAME</a>. If you don&rsquo;t you&rsquo;ll run into an issue with RabbitMQ losing the database&rsquo;s that were setup (by default, they&rsquo;re based on hostname&hellip; so if you resize a EC2 instance the hostname may change, and you&rsquo;ll either have to do some moving around or manually set the NODENAME to the previous hostname).</li>
<li>Client&rsquo;s may fail to validate after this - requiring a regeneration of the validation.pem, which is fine since this file is only used for the initial bootstrap of a server.</li>
<li>Make sure you run your chef recipes you setup (for instance monitoring) on your chef-server.</li>
</ul>


<p>I hope these tips will be helpful to other people when they run into a Chef/CouchDB/RabbitMQ issue after a server resize or hostname change. Another really helpful place is #chef on freenode&rsquo;s IRC servers.</p>
]]></content>
  </entry>
  
</feed>
