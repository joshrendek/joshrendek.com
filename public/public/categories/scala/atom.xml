<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Scala | Josh Rendek]]></title>
  <link href="http://joshrendek.com/categories/scala/atom.xml" rel="self"/>
  <link href="http://joshrendek.com/"/>
  <updated>2016-12-15T16:05:34-05:00</updated>
  <id>http://joshrendek.com/</id>
  <author>
    <name><![CDATA[Josh Rendek]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Parsing HTML in Scala]]></title>
    <link href="http://joshrendek.com/2013/10/parsing-html-in-scala/"/>
    <updated>2013-10-31T13:34:00-04:00</updated>
    <id>http://joshrendek.com/2013/10/parsing-html-in-scala</id>
    <content type="html"><![CDATA[<p>Is there ever a confusing amount of information out there on parsing HTML in Scala. Here is the list of possible ways I ran across:</p>

<ul>
<li>Hope the document is valid XHTML and use <code>scala.xml.XML</code> to parse it</li>
<li>If the document isn&rsquo;t valid XHTML use something like TagSoup and hope it parses again</li>
<li>Still think its valid XHTML? Try using <code>scalaz</code>&rsquo;s XML parser</li>
</ul>


<p>All of the answers I found on Google pointed to some type of XML parsing, which won&rsquo;t always work. Coming from Ruby I know there are tools out there like Selenium that can simulate a web browser for you and give you a rich interface to interact with the returned HTML.</p>

<p>So I went on Maven and found the two Selenium web drivers I wanted for my project and added them to my <code>libraryDependencies</code>:</p>

<pre><code>    "org.seleniumhq.webdriver" % "webdriver-selenium" % "0.9.7376",
    "org.seleniumhq.webdriver" % "webdriver-htmlunit" % "0.9.7376"
</code></pre>

<p>The project I&rsquo;m working on is to parse Looking Glass websites for BGP information and AS peering, so I wanted to scrape the data. I also didn&rsquo;t want to have to use a full blown web browser (ala Selenium + Firefox for instance) - so I stuck with the <code>HtmlUnit</code> driver for the implementation.</p>

<p>Here is a quick code snippet that lets me grab AS #&rsquo;s and Peer names from an AS:</p>

<pre><code class="scala AS.scala">val url = "http://example.com/AS" + as.toString

val driver = new HtmlUnitDriver
// Proxy for BetaMax when writing tests
if (_port != null) {
  driver.setProxy("localhost", _port)
}
driver.get(url)

val peers = driver.findElementsByXPath("//*[@id=\"table_peers4\"]/tbody/tr/td[position() = 1 or position() = 2]")

// zip up the list in pairs so List(a,b,c,d) becomes List((a,b), (c,d))
for(peer &lt;- peers zip peers.tail) {
  println(peer)
}
</code></pre>

<p>No XML to muck with and I get some nice selectors to query the document for. Remember if the source you want data from doesn&rsquo;t have an API, HTML is an API! Just be respectful of how you query and interact with them (ie: Don&rsquo;t do 100 requests/second, cache/record responses while writing tests, etc).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started With Scala]]></title>
    <link href="http://joshrendek.com/2013/10/getting-started-with-scala/"/>
    <updated>2013-10-28T20:42:00-04:00</updated>
    <id>http://joshrendek.com/2013/10/getting-started-with-scala</id>
    <content type="html"><![CDATA[<p>Recently I&rsquo;ve been getting into more Java and (attempting to) Scala development. I always got annoyed with the Scala ecosystem for development and would get fed up and just go back to writing straight Java (<em>cough</em>sbt<em>cough</em>). Today I decided to write down everything I did and get a sane process going for Scala development with SBT.</p>

<p>I decided to write a small Scala client for <a href="http://openweathermap.org">OpenWeatherMap</a> - here is what I went through.</p>

<p>A brief guide on naming conventions is <a href="http://docs.scala-lang.org/style/naming-conventions.html">here</a>. I found this useful just to reference conventions since not everything is the same as Ruby (camelCase vs snake_case for instance).</p>

<h2>Setting up and starting a project</h2>

<p>First make sure you hava a JVM installed, Scala, and SBT. I&rsquo;ll be using Scala 2.10.2 and SBT 0.12.1 since that is what I have installed.</p>

<p>One of the nice things I like about Ruby on Rails is the project generation ( aka: <code>rails new project [opts]</code> ) so I was looking for something similar with Scala.</p>

<p>Enter giter8: <a href="https://github.com/n8han/giter8">https://github.com/n8han/giter8</a></p>

<p>giter8 runs through SBT and has <a href="http://github.com/n8han/giter8/wiki/giter8-templates">templates</a> available for quickstart.</p>

<p>Follow the install instructions and install giter8 into SBT globally and load SBT to make sure it downloads and installs.</p>

<p>Once you do that you can pick a template from the list, or go with the one I chose: <code>fayimora/basic-scala-project</code> which sets up the directories properly and also sets up <a href="www.scalatest.org">ScalaTest</a>, a testing framework with a DSL similar to RSpec.</p>

<p>To setup your project you need to run:</p>

<pre><code>g8 fayimora/basic-scala-project
</code></pre>

<p>You&rsquo;ll be prompted with several questions and then your project will be made. Switch into that directory and run <code>sbt test</code> to make sure the simple HelloWorld passes and everything with SBT is working.</p>

<h2>Setting up IntelliJ</h2>

<p>For Java and Scala projects I stick with IntelliJ over my usual vim. When using Java IntelliJ is good about picking up library and class path&rsquo;s and resolving dependencies (especially if you are using Maven). However there isn&rsquo;t a good SBT plugin (as of writing this) that manages to do all this inside IntelliJ.</p>

<p>The best plugin for SBT I&rsquo;ve found that does this is <a href="https://github.com/mpeltonen/sbt-idea">sbt-idea</a>. You&rsquo;re going to need to make a <code>project/plugins.sbt</code> file:</p>

<pre><code class="scala plugins.sbt">
addSbtPlugin("com.github.mpeltonen" % "sbt-idea" % "1.5.2")
</code></pre>

<p>and now you can generate your <code>.idea</code> files by running: <code>sbt gen-idea</code></p>

<p>IntelliJ should now resolve your project dependencies and you can start coding your project.</p>

<h2>Final Result</h2>

<p><a href="https://github.com/joshrendek/scala-weather">scala-weather</a> - A simple to use OpenWeatherMap client in Scala set up with Travis-CI and CodeClimate. This is just the first of several projects I plan on working on / open sourcing to get my feet wet with Scala more.</p>

<h2>Useful libraries</h2>

<ul>
<li><a href="HTTP:">HTTP:</a> <a href="www.bigbeeconsultants.co.uk/bee-client">Bee Client</a></li>
<li>HTTP Mocking: <a href="http://freeside.co/betamax/">BetaMax</a></li>
<li>JSON Parsing: <a href="http://json4s.org/">Json4s</a></li>
<li>Testing: <a href="http://scalatest.org">ScalaTest</a></li>
<li>Logging: <a href="http://logback.qos.ch/">logback</a></li>
</ul>


<h2>Notes</h2>

<p>By default Bee Client will log everything to STDOUT - you&rsquo;ll need to configure <a href="http://logback.qos.ch">logback</a> with an XML file located in <code>src/main/resources/logback.xml</code>:</p>

<pre><code class="xml src/main/resources/logback/xml">&lt;configuration&gt;

    &lt;appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender"&gt;
        &lt;encoder&gt;
            &lt;pattern&gt;%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n&lt;/pattern&gt;
        &lt;/encoder&gt;
    &lt;/appender&gt;

    &lt;root level="ERROR"&gt;
        &lt;appender-ref ref="STDOUT" /&gt;
    &lt;/root&gt;
&lt;/configuration&gt;
</code></pre>
]]></content>
  </entry>
  
</feed>
