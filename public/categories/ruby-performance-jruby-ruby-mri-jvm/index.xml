<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ruby Performance Jruby Ruby Mri Jvm on Josh Rendek</title>
    <link>https://joshrendek.com/categories/ruby-performance-jruby-ruby-mri-jvm/</link>
    <description>Recent content in Ruby Performance Jruby Ruby Mri Jvm on Josh Rendek</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Â© Copyright 2008-2017 Josh Rendek</copyright>
    <lastBuildDate>Sat, 03 Nov 2012 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://joshrendek.com/categories/ruby-performance-jruby-ruby-mri-jvm/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Sidekiq vs Resque, with MRI and JRuby</title>
      <link>https://joshrendek.com/2012/11/sidekiq-vs-resque/</link>
      <pubDate>Sat, 03 Nov 2012 00:00:00 +0000</pubDate>
      
      <guid>https://joshrendek.com/2012/11/sidekiq-vs-resque/</guid>
      <description>Before we dive into the benchmarks of Resque vs Sidekiq it will first help to have a better understanding of how forking and threading works in Ruby.
Threading vs Forking Forking When you fork a process you are creating an entire copy of that process: the address space and all open file descriptors. You get a separate copy of the address space of the parent process, isolating any work done to that fork.</description>
    </item>
    
  </channel>
</rss>