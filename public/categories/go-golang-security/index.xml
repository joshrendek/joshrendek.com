<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go Golang Security on Josh Rendek</title>
    <link>https://joshrendek.com/categories/go-golang-security/</link>
    <description>Recent content in Go Golang Security on Josh Rendek</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Â© Copyright 2008-2017 Josh Rendek</copyright>
    <lastBuildDate>Tue, 08 Jul 2014 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://joshrendek.com/categories/go-golang-security/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Go-lang compare *ssh.Request.Type against a string</title>
      <link>https://joshrendek.com/2014/07/go-lang-compare-star-ssh-dot-request-dot-type-against-a-string/</link>
      <pubDate>Tue, 08 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>https://joshrendek.com/2014/07/go-lang-compare-star-ssh-dot-request-dot-type-against-a-string/</guid>
      <description>I was working on the agent for SSH Pot and ran into something interesting last night. A lot of the brute force attempts attempt to run a command like this:
ssh user@host &#39;uname&#39;  This is different than:
ssh user@host $ uname  The first command is executing a command then exiting, the second is actually logging in and giving the user a shell. The first requests a exec subsystem and the second requests a shell subsystem - so there are two ways to handle it.</description>
    </item>
    
  </channel>
</rss>