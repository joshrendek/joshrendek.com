<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Chef Ruby on Josh Rendek</title>
    <link>https://joshrendek.com/categories/chef-ruby/</link>
    <description>Recent content in Chef Ruby on Josh Rendek</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Â© Copyright 2008-2017 Josh Rendek</copyright>
    <lastBuildDate>Wed, 05 Dec 2012 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://joshrendek.com/categories/chef-ruby/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Dealing with cascading failures with Chef Server</title>
      <link>https://joshrendek.com/2012/12/dealing-with-cascading-failures-with-chef-server/</link>
      <pubDate>Wed, 05 Dec 2012 00:00:00 +0000</pubDate>
      
      <guid>https://joshrendek.com/2012/12/dealing-with-cascading-failures-with-chef-server/</guid>
      <description>Chef is awesome. Being able to recreate your entire environment from a recipe is an inredibly powerful tool, and I had started using Chef a few months ago. When I had initially configured the Chef server I hadn&amp;rsquo;t paid much attention to the couchdb portion of it until I had a chef-server hiccup. Here are a few things to watch out for when running chef-server:
 Setup CouchDB compaction - Chef had a CouchDB size of 30+GB (after compaction it was only a few megabytes).</description>
    </item>
    
  </channel>
</rss>