<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Security Linux on Josh Rendek</title>
    <link>https://joshrendek.com/categories/security-linux/</link>
    <description>Recent content in Security Linux on Josh Rendek</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Â© Copyright 2008-2017 Josh Rendek</copyright>
    <lastBuildDate>Tue, 26 Feb 2013 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://joshrendek.com/categories/security-linux/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Why setuid Is Bad and What You Can Do</title>
      <link>https://joshrendek.com/2013/02/why-setuid-is-bad-and-what-you-can-do/</link>
      <pubDate>Tue, 26 Feb 2013 00:00:00 +0000</pubDate>
      
      <guid>https://joshrendek.com/2013/02/why-setuid-is-bad-and-what-you-can-do/</guid>
      <description>Why setuid is Bad setuid allows a binary to be run as a different user then the one invoking it. For example, ping needs to use low level system interfaces (socket, PF_INET, SOCK_RAW, etc) in order to function properly. We can watch this in action by starting ping in another terminal window ( ping google.com ) and then using strace to see the syscall&amp;rsquo;s being made:
sudo strace -p PID and we get the following:</description>
    </item>
    
  </channel>
</rss>